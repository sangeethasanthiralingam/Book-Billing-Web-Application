package template;

import java.util.List;
import java.util.Date;

/**
 * Template Method Pattern: Report Template
 * Defines the skeleton of report generation algorithm
 */
public abstract class ReportTemplate {
    
    /**
     * Template method that defines the algorithm structure
     * @param reportType the type of report to generate
     * @param parameters additional parameters for the report
     * @return the generated report content
     */
    public final String generateReport(String reportType, Object... parameters) {
        System.out.println("Starting report generation: " + reportType);
        
        // Step 1: Validate parameters
        if (!validateParameters(reportType, parameters)) {
            throw new IllegalArgumentException("Invalid parameters for report: " + reportType);
        }
        
        // Step 2: Collect data
        List<Object> data = collectData(reportType, parameters);
        
        // Step 3: Process data
        List<Object> processedData = processData(data);
        
        // Step 4: Format report
        String reportContent = formatReport(processedData, reportType);
        
        // Step 5: Add metadata
        String finalReport = addMetadata(reportContent, reportType);
        
        System.out.println("Report generation completed: " + reportType);
        return finalReport;
    }
    
    /**
     * Hook method: Validate report parameters
     * @param reportType the type of report
     * @param parameters the parameters to validate
     * @return true if parameters are valid, false otherwise
     */
    protected abstract boolean validateParameters(String reportType, Object... parameters);
    
    /**
     * Hook method: Collect data for the report
     * @param reportType the type of report
     * @param parameters additional parameters
     * @return list of data objects
     */
    protected abstract List<Object> collectData(String reportType, Object... parameters);
    
    /**
     * Hook method: Process collected data
     * @param data the raw data to process
     * @return processed data
     */
    protected abstract List<Object> processData(List<Object> data);
    
    /**
     * Hook method: Format the report
     * @param data the processed data
     * @param reportType the type of report
     * @return formatted report content
     */
    protected abstract String formatReport(List<Object> data, String reportType);
    
    /**
     * Concrete method: Add metadata to report
     * @param reportContent the report content
     * @param reportType the type of report
     * @return report with metadata
     */
    protected String addMetadata(String reportContent, String reportType) {
        StringBuilder metadata = new StringBuilder();
        metadata.append("=== ").append(reportType.toUpperCase()).append(" REPORT ===\n");
        metadata.append("Generated on: ").append(new Date()).append("\n");
        metadata.append("Generated by: BookShop Billing System\n");
        metadata.append("=====================================\n\n");
        metadata.append(reportContent);
        metadata.append("\n\n=== END OF REPORT ===\n");
        
        return metadata.toString();
    }
    
    /**
     * Get report type
     * @return the type of report this template handles
     */
    public abstract String getReportType();
    
    /**
     * Get supported report types
     * @return array of supported report types
     */
    public abstract String[] getSupportedReportTypes();
} 